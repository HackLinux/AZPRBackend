//===- AZPRDisassembler.cpp - Disassembler for AZPR -------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file is part of the AZPR Disassembler.
//
//===----------------------------------------------------------------------===//

#include "AZPR.h"
#include "AZPRSubtarget.h"
#include "llvm/MC/EDInstInfo.h"
#include "llvm/MC/MCDisassembler.h"
#include "llvm/MC/MCFixedLenDisassembler.h"
#include "llvm/Support/MemoryObject.h"
#include "llvm/Support/TargetRegistry.h"
#include "llvm/MC/MCSubtargetInfo.h"
#include "llvm/MC/MCInst.h"
#include "llvm/MC/MCRegisterInfo.h"
#include "llvm/Support/MathExtras.h"

#include "AZPRGenEDInfo.inc"

using namespace llvm;

typedef MCDisassembler::DecodeStatus DecodeStatus;

/// AZPRDisassembler - a disasembler class for AZPR32.
class AZPRDisassembler : public MCDisassembler {
public:
  /// Constructor     - Initializes the disassembler.
  ///
  AZPRDisassembler(const MCSubtargetInfo &STI)
      : MCDisassembler(STI) {}

  ~AZPRDisassembler() {}

  /// getInstruction - See MCDisassembler.
  DecodeStatus getInstruction(MCInst &instr,
                              uint64_t &size,
                              const MemoryObject &region,
                              uint64_t address,
                              raw_ostream &vStream,
                              raw_ostream &cStream) const;

  const EDInstInfo *getEDInfo() const;

private:
  DecodeStatus readInstruction32(const MemoryObject &region,
                                 uint64_t address,
                                 uint64_t &size,
                                 uint32_t &insn) const;
};

const EDInstInfo *AZPRDisassembler::getEDInfo() const {
  return instInfoAZPR;
}

// Decoder tables for AZPR register
static const unsigned CPUGRegsTable[] = {
AZPR::r0, AZPR::r1, AZPR::r2, AZPR::r3, AZPR::r4, AZPR::r5, AZPR::r6, AZPR::r7, AZPR::r8, AZPR::r9, AZPR::r10, AZPR::r11, AZPR::r12, AZPR::r13, AZPR::r14, AZPR::r15, AZPR::r16, AZPR::r17, AZPR::r18, AZPR::r19, AZPR::r20, AZPR::r21, AZPR::r22, AZPR::r23, AZPR::r24, AZPR::r25, AZPR::r26, AZPR::r27, AZPR::r28, AZPR::r29, AZPR::r30, AZPR::r31
};

static const unsigned CPUCRegsTable[] = {
AZPR::c0, AZPR::c1, AZPR::c2, AZPR::c3, AZPR::c4, AZPR::c5, AZPR::c6, AZPR::c7, AZPR::c8, AZPR::c9, AZPR::c10, AZPR::c11, AZPR::c12, AZPR::c13, AZPR::c14, AZPR::c15, AZPR::c16, AZPR::c17, AZPR::c18, AZPR::c19, AZPR::c20, AZPR::c21, AZPR::c22, AZPR::c23, AZPR::c24, AZPR::c25, AZPR::c26, AZPR::c27, AZPR::c28, AZPR::c29, AZPR::c30, AZPR::c31
};

// Forward declare these because the autogenerated code will reference them.
// Definitions are further down.
// DecodeXXX関数はtablegenでDecoderMethodを指定した場合に
// decodeAZPRInstruction32()から参照される。

// tablegenで作成したCPUGRegs(RegisterClass)を表示する
static DecodeStatus DecodeCPUGRegsRegisterClass(MCInst &Inst,
                                               unsigned RegNo,
                                               uint64_t Address,
                                               const void *Decoder);

static DecodeStatus DecodeCPUCRegsRegisterClass(MCInst &Inst,
                                               unsigned RegNo,
                                               uint64_t Address,
                                               const void *Decoder);

static DecodeStatus DecodeMem(MCInst &Inst,
                              unsigned RegNo,
                              uint64_t Address,
                              const void *Decoder);
/*
static DecodeStatus DecodeMoveTarget(MCInst &Inst,
                                     unsigned Insn,
                                     uint64_t Address,
                                     const void *Decoder);

static DecodeStatus DecodeCallTarget(MCInst &Inst,
                                     unsigned Insn,
                                     uint64_t Address,
                                     const void *Decoder);
*/
static DecodeStatus DecodeImmS16(MCInst &Inst,
                                   unsigned imm,
                                   uint64_t Address,
                                   const void *Decoder);

static MCDisassembler *createAZPRDisassembler(
                       const Target &T,
                       const MCSubtargetInfo &STI) {
  return new AZPRDisassembler(STI);
}

extern "C" void LLVMInitializeAZPRDisassembler() {
  // Register the disassembler.
  TargetRegistry::RegisterMCDisassembler(TheAZPRTarget,
                                         createAZPRDisassembler);
}

#include "AZPRGenDisassemblerTables.inc"

  /// readInstruction - read four bytes from the MemoryObject
  /// and return 32 bit word sorted according to the given endianess
DecodeStatus AZPRDisassembler::
readInstruction32(const MemoryObject &region,
                  uint64_t address,
                  uint64_t &size,
                  uint32_t &insn) const {
  uint8_t Bytes[4];

  // We want to read exactly 4 Bytes of data.
  if (region.readBytes(address, 4, (uint8_t*)Bytes, NULL) == -1) {
    size = 0;
    return MCDisassembler::Fail;
  }

  // Encoded as a small-endian 32-bit word in the stream.
  insn = (Bytes[3] <<  0) |
         (Bytes[2] <<  8) |
         (Bytes[1] << 16) |
         (Bytes[0] << 24);

  return MCDisassembler::Success;
}

DecodeStatus AZPRDisassembler::
getInstruction(MCInst &instr,
               uint64_t &Size,
               const MemoryObject &Region,
               uint64_t Address,
               raw_ostream &vStream,
               raw_ostream &cStream) const {
  uint32_t Insn;

  DecodeStatus Result = readInstruction32(Region, Address, Size,
                                          Insn);
  if (Result == MCDisassembler::Fail)
    return MCDisassembler::Fail;

  // Calling the auto-generated decoder function.
  Result = decodeInstruction(DecoderTableAZPR32, 
                             instr, Insn, Address, this, STI);
  if (Result != MCDisassembler::Fail) {
    Size = 4;
    return Result;
  }

  return MCDisassembler::Fail;
}

static DecodeStatus DecodeCPUGRegsRegisterClass(MCInst &Inst,
                                               unsigned RegNo,
                                               uint64_t Address,
                                               const void *Decoder) {
  if (RegNo > 31)
    return MCDisassembler::Fail;

  Inst.addOperand(MCOperand::CreateReg(CPUGRegsTable[RegNo]));
  return MCDisassembler::Success;
}

static DecodeStatus DecodeCPUCRegsRegisterClass(MCInst &Inst,
                                               unsigned RegNo,
                                               uint64_t Address,
                                               const void *Decoder) {
  if (RegNo > 31)
    return MCDisassembler::Fail;

  Inst.addOperand(MCOperand::CreateReg(CPUCRegsTable[RegNo]));
  return MCDisassembler::Success;
}

static DecodeStatus DecodeImmS16(MCInst &Inst,
                                   unsigned imm,
                                   uint64_t Address,
                                   const void *Decoder) {
  Inst.addOperand(MCOperand::CreateImm(SignExtend32<16>(imm)));
  return MCDisassembler::Success;
}

static DecodeStatus DecodeMem(MCInst &Inst,
                              unsigned Insn,
                              uint64_t Address,
                              const void *Decoder) {
  int Offset = SignExtend32<16>(Insn & 0xffff);
  int Reg = (int)fieldFromInstruction(Insn, 16, 5);
  int Base = (int)fieldFromInstruction(Insn, 21, 5);

  Inst.addOperand(MCOperand::CreateReg(CPUGRegsTable[Reg]));
  Inst.addOperand(MCOperand::CreateReg(CPUGRegsTable[Base]));
  Inst.addOperand(MCOperand::CreateImm(Offset));

  return MCDisassembler::Success;
}

/*
static DecodeStatus DecodeMoveTarget(MCInst &Inst,
                                     unsigned Insn,
                                     uint64_t Address,
                                     const void *Decoder) {
  int Offset = SignExtend32<21>(Insn & 0x1fffff);
  int Reg = (int)fieldFromInstruction(Insn, 21, 5);

  Inst.addOperand(MCOperand::CreateReg(CPUGRegsTable[Reg]));
  Inst.addOperand(MCOperand::CreateImm(Offset));

  return MCDisassembler::Success;
}
*/
/*
static DecodeStatus DecodeCallTarget(MCInst &Inst,
                                     unsigned Insn,
                                     uint64_t Address,
                                     const void *Decoder) {

  unsigned CallOffset = fieldFromInstruction(Insn, 0, 26) << 2;
  Inst.addOperand(MCOperand::CreateImm(CallOffset));
  return MCDisassembler::Success;
}
*/
