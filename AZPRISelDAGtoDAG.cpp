//===-- AZPRISelDAGToDAG.cpp - A Dag to Dag Inst Selector for AZPR --------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the AZPR target.
//
//===----------------------------------------------------------------------===//

#define DEBUG_TYPE "azpr-isel"
#include "AZPR.h"
#include "AZPRRegisterInfo.h"
#include "AZPRSubtarget.h"
#include "AZPRTargetMachine.h"
#include "MCTargetDesc/AZPRMCTargetDesc.h"
#include "llvm/GlobalValue.h"
#include "llvm/Instructions.h"
#include "llvm/Intrinsics.h"
#include "llvm/Support/CFG.h"
#include "llvm/Type.h"
#include "llvm/CodeGen/MachineConstantPool.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/SelectionDAGNodes.h"
#include "llvm/Target/TargetMachine.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// AZPRDAGToDAGISel - AZPR specific code to select AZPR machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//
namespace {

class AZPRDAGToDAGISel : public SelectionDAGISel {

  /// TM - Keep a reference to AZPRTargetMachine.
  const AZPRTargetMachine &TM;

  /// Subtarget - Keep a pointer to the AZPRSubtarget around so that we can
  /// make the right decision when generating code for different targets.
  const AZPRSubtarget &Subtarget;

public:
  explicit AZPRDAGToDAGISel(AZPRTargetMachine &tm) :
  SelectionDAGISel(tm),
  TM(tm),
  Subtarget(tm.getSubtarget<AZPRSubtarget>()) {}

  // Pass Name
  virtual const char *getPassName() const {
    return "AZPR DAG->DAG Pattern Instruction Selection";
  }

private:
  // Include the pieces autogenerated from the target description.
  #include "AZPRGenDAGISel.inc"

  /// getTargetMachine - Return a reference to the TargetMachine, casted
  /// to the target-specific type.
  const AZPRTargetMachine &getTargetMachine() {
    return static_cast<const AZPRTargetMachine &>(TM);
  }

  /// getInstrInfo - Return a reference to the TargetInstrInfo, casted
  /// to the target-specific type.
  const AZPRInstrInfo *getInstrInfo() {
    return getTargetMachine().getInstrInfo();
  }

  SDNode *Select(SDNode *N) /*override*/;

  // Complex Pattern.
  bool SelectAddr(SDNode *Parent, SDValue N, SDValue &Base, SDValue &Offset);
};
}

/// ComplexPattern used on AZPRInstrInfo
/// Used on AZPR Load/Store instructions
bool AZPRDAGToDAGISel::
SelectAddr(SDNode *Parent, SDValue N, SDValue &Base, SDValue &Offset) {
  EVT ValTy = N.getValueType();
  DebugLoc dl = N.getDebugLoc();

  const LSBaseSDNode* LS = 0;

  if (Parent && (LS = dyn_cast<LSBaseSDNode>(Parent))) {
    EVT VT = LS->getMemoryVT();

    if (VT.getSizeInBits() / 8 > LS->getAlignment()) {
      assert(TLI.allowsUnalignedMemoryAccesses(VT) &&
             "Unaligned loads/stores not supported for this type.");
    }
    if (VT.getSizeInBits() == 8){

    }
  }

  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(N)) {
    Base   = CurDAG->getTargetFrameIndex(FIN->getIndex(), ValTy);
    Offset = CurDAG->getTargetConstant(0, ValTy);
    return true;
  }

  DEBUG(dbgs() << "SelectAddr: Unknown pattern?\n");

/*
Nが片方のOperandに定数を持つadd命令ならば、その定数をOffsetとし、もう一方をBaseとする
*/
  SDNode *node = N.getNode();
  if(node->getOpcode() == ISD::ADD){
    ConstantSDNode *cn0 = dyn_cast<ConstantSDNode>(node->getOperand(0).getNode());
    ConstantSDNode *cn1 = dyn_cast<ConstantSDNode>(node->getOperand(1).getNode());
    if(cn0){
      Base = node->getOperand(1);
      Offset = CurDAG->getTargetConstant(cn0->getSExtValue(), ValTy);
      return true;
    }
    if(cn1){
      Base = node->getOperand(0);
      Offset = CurDAG->getTargetConstant(cn1->getSExtValue(), ValTy);
      return true;
    }
  }
  Base   = N;
  Offset = CurDAG->getTargetConstant(0, ValTy);
  return true;
/*
  llvm_unreachable("Unknown pattern");
  return true;*/
}

/// Select instructions not customized! Used for
/// expanded, promoted and normal instructions
SDNode* AZPRDAGToDAGISel::
Select(SDNode *Node) {
//  DebugLoc dl = Node->getDebugLoc();
  switch(Node->getOpcode()) {
  case ISD::SELECT_CC: {
    ISD::CondCode CC = cast<CondCodeSDNode>(Node->getOperand(4))->get();
    SDValue Ops[] = { Node->getOperand(0), Node->getOperand(1),
                        Node->getOperand(2), Node->getOperand(3),
                        CurDAG->getTargetConstant(CC, MVT::i32)};
    return CurDAG->SelectNodeTo(Node, AZPR::SELECT_CC, Node->getValueType(0), Ops, 5);
  }
/*  case ISD::Constant:{
    const ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Node);
    unsigned Size = CN->getValueSizeInBits(0);
    int64_t Imm = CN->getSExtValue();
    DEBUG(errs() << "Imm = " << Imm << ": Size = " << Size);
    if((Imm & 0xFFFF0000) == 0){
      SDValue ImmOpnd= CurDAG->getTargetConstant(Imm, MVT::i32);
      return CurDAG->getMachineNode(AZPR::ORI, dl, MVT::i32, CurDAG->getRegister(AZPR::r0, MVT::i32), ImmOpnd);
    }
  }
    break;*/
  default:
    break;
  }
  // Select the default instruction
  SDNode *ResNode = SelectCode(Node);

  DEBUG(errs() << "=> ");
  if (ResNode == NULL || ResNode == Node)
    DEBUG(Node->dumpr(CurDAG));
  else
    DEBUG(ResNode->dumpr(CurDAG));
  DEBUG(errs() << "\n");
  return ResNode;
}

/// createAZPRISelDag - This pass converts a legalized DAG into a
/// AZPR-specific DAG, ready for instruction scheduling.
FunctionPass *llvm::createAZPRISelDag(AZPRTargetMachine &TM) {
  return new AZPRDAGToDAGISel(TM);
}
